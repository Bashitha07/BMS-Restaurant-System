@startuml Ordering_Reservations_Use_Cases
!theme plain
left to right direction
skinparam backgroundColor #FEFEFE
skinparam packageBackgroundColor #FFFFFF
skinparam packageBorderColor #000000
skinparam actorBackgroundColor #FFFFFF
skinparam actorBorderColor #000000
skinparam usecaseBackgroundColor #FFFFFF
skinparam usecaseBorderColor #000000
skinparam noteBackgroundColor #FFFFFF
skinparam noteBorderColor #000000
skinparam packageFontSize 12
skinparam usecaseFontSize 11
skinparam actorFontSize 11
title BMS Restaurant-System - Ordering & Reservations Use Cases (CRUD Structure)

' Primary Actors (Right Side - inverted)
actor "Customer" as customer
actor "Admin" as admin
actor "Driver" as driver

' System boundary with entities flowing right to left (visual inversion)
rectangle "Ordering & Reservation System" as system {

    ' Order Entity - Leftmost position (inverted layout)
    package "Order Entity" as order_entity {
        usecase "Manage Orders" as manage_orders
        usecase "Create Order" as create_order
        usecase "Read/View Orders" as read_orders
        usecase "Update Order" as update_order
        usecase "Delete/Cancel Order" as delete_order
        usecase "Track Order Status" as track_status
        usecase "View Order Details" as view_details
        usecase "View Order History" as view_history
        usecase "Request Order Modification" as modify_order
        usecase "Download Digital Receipt" as download_receipt
    }

    ' Cart Entity - Next to Order Entity
    package "Cart Entity" as cart_entity {
        usecase "Manage Cart" as manage_cart
        usecase "Create Cart Item" as create_cart
        usecase "Read Cart Contents" as read_cart
        usecase "Update Cart Item" as update_cart
        usecase "Delete Cart Item" as delete_cart
        usecase "Save Cart for Later" as save_cart
        usecase "Clear Cart" as clear_cart
        usecase "Calculate Cart Total" as calc_total
    }

    ' Reservation Entity - Next to Cart Entity
    package "Reservation Entity" as reservation_entity {
        usecase "Manage Reservations" as manage_reservations
        usecase "Create Reservation" as create_reservation
        usecase "Read/View Reservations" as read_reservations
        usecase "Update Reservation" as update_reservation
        usecase "Delete/Cancel Reservation" as delete_reservation
        usecase "Check Table Availability" as check_avail
        usecase "Select Reservation Date/Time" as select_datetime
        usecase "Choose Party Size" as choose_size
        usecase "Select Table Preference" as select_table
        usecase "Add Reservation Notes" as add_notes
        usecase "Receive Reservation Confirmation" as receive_res_confirm
        usecase "View Reservation History" as view_res_history
    }

    ' Delivery Entity - Next to Reservation Entity
    package "Delivery Entity" as delivery_entity {
        usecase "Manage Deliveries" as manage_deliveries
        usecase "Create Delivery Assignment" as create_delivery
        usecase "Read Delivery Status" as read_delivery
        usecase "Update Delivery Status" as update_delivery
        usecase "Complete Delivery" as complete_delivery
        usecase "View Assigned Deliveries" as view_deliveries
        usecase "Accept Delivery Assignment" as accept_delivery
        usecase "Decline Delivery Assignment" as decline_delivery
        usecase "Contact Customer" as contact_customer
        usecase "Collect Cash Payment" as collect_cash
        usecase "Upload Delivery Proof" as upload_proof
        usecase "Report Delivery Issues" as report_delivery_issues
    }

    ' Order Processing - Next to Delivery Entity
    package "Order Processing" as order_processing {
        usecase "Process Orders" as process_orders
        usecase "Filter Orders by Status" as filter_orders
        usecase "Assign Delivery Driver" as assign_driver
        usecase "Reassign Orders" as reassign_orders
        usecase "Process Order Cancellations" as process_cancels
        usecase "Handle Refund Requests" as handle_refunds
    }

    ' Reservation Administration - Rightmost position
    package "Reservation Administration" as reservation_admin {
        usecase "Administer Reservations" as admin_reservations
        usecase "Manage Table Layout" as manage_layout
        usecase "Assign Tables to Reservations" as assign_tables
        usecase "Complete Reservation" as complete_reservation
        usecase "Manage Reservation Policies" as manage_policies
    }
}

' CRUD Relationships - Orders (Include: mandatory, base -> included)
manage_orders --> create_order : <<include>>
manage_orders --> read_orders : <<include>>
manage_orders --> update_order : <<include>>
manage_orders --> delete_order : <<include>>

' Extended Order operations (Extend: optional, extender -> base)
read_orders <.. track_status : <<extend>>
read_orders <.. view_details : <<extend>>
read_orders <.. view_history : <<extend>>
read_orders <.. modify_order : <<extend>>
read_orders <.. download_receipt : <<extend>>

' CRUD Relationships - Cart (Include: mandatory, base -> included)
manage_cart --> create_cart : <<include>>
manage_cart --> read_cart : <<include>>
manage_cart --> update_cart : <<include>>
manage_cart --> delete_cart : <<include>>

' Extended Cart operations (Extend: optional, extender -> base)
read_cart <.. save_cart : <<extend>>
read_cart <.. clear_cart : <<extend>>
read_cart <.. calc_total : <<extend>>

' CRUD Relationships - Reservations (Include: mandatory, base -> included)
manage_reservations --> create_reservation : <<include>>
manage_reservations --> read_reservations : <<include>>
manage_reservations --> update_reservation : <<include>>
manage_reservations --> delete_reservation : <<include>>

' Extended Reservation operations (Extend: optional, extender -> base)
read_reservations <.. check_avail : <<extend>>
read_reservations <.. select_datetime : <<extend>>
read_reservations <.. choose_size : <<extend>>
read_reservations <.. select_table : <<extend>>
read_reservations <.. add_notes : <<extend>>
read_reservations <.. receive_res_confirm : <<extend>>
read_reservations <.. view_res_history : <<extend>>

' CRUD Relationships - Deliveries (Include: mandatory, base -> included)
manage_deliveries --> create_delivery : <<include>>
manage_deliveries --> read_delivery : <<include>>
manage_deliveries --> update_delivery : <<include>>
manage_deliveries --> complete_delivery : <<include>>

' Extended Delivery operations (Extend: optional, extender -> base)
read_delivery <.. view_deliveries : <<extend>>
read_delivery <.. accept_delivery : <<extend>>
read_delivery <.. decline_delivery : <<extend>>
read_delivery <.. contact_customer : <<extend>>
read_delivery <.. collect_cash : <<extend>>
read_delivery <.. upload_proof : <<extend>>
read_delivery <.. report_delivery_issues : <<extend>>

' Extended Processing operations (Extend: optional, extender -> base)
process_orders <.. filter_orders : <<extend>>
process_orders <.. assign_driver : <<extend>>
process_orders <.. reassign_orders : <<extend>>
process_orders <.. process_cancels : <<extend>>
process_orders <.. handle_refunds : <<extend>>

' Extended Reservation Admin operations (Extend: optional, extender -> base)
admin_reservations <.. manage_layout : <<extend>>
admin_reservations <.. assign_tables : <<extend>>
admin_reservations <.. complete_reservation : <<extend>>
admin_reservations <.. manage_policies : <<extend>>

' Actor Relationships
customer --> manage_cart
customer --> manage_orders
customer --> manage_reservations

admin --> process_orders
admin --> admin_reservations

driver --> manage_deliveries


@enduml