@startuml Menu_Handling_Use_Cases
!theme plain
left to right direction
skinparam backgroundColor #FEFEFE
skinparam packageBackgroundColor #FFFFFF
skinparam packageBorderColor #000000
skinparam actorBackgroundColor #FFFFFF
skinparam actorBorderColor #000000
skinparam usecaseBackgroundColor #FFFFFF
skinparam usecaseBorderColor #000000
skinparam noteBackgroundColor #FFFFFF
skinparam noteBorderColor #000000
skinparam packageFontSize 12
skinparam usecaseFontSize 11
skinparam actorFontSize 11
title BMS Restaurant-System - Menu Management Use Cases (CRUD Structure)

' Primary Actors (Right Side - inverted)
actor "Customer" as customer
actor "Admin" as admin

' System boundary with entities flowing left to right (inverted layout)
rectangle "Menu Management System" as system {

    ' Menu Item Entity - Leftmost position
    package "Menu Item Entity" as menu_entity {
        usecase "Manage Menu Items" as manage_items
        usecase "Create Menu Item" as create_item
        usecase "Read/View Menu Items" as read_items
        usecase "Update Menu Item" as update_item
        usecase "Delete Menu Item" as delete_item
        usecase "Upload Item Images" as upload_images
        usecase "Set Item Prices" as set_prices
        usecase "Set Discounted Prices" as set_discounts
        usecase "Update Availability Status" as update_avail
    }

    ' Category Entity - Next to Menu Item Entity
    package "Category Entity" as category_entity {
        usecase "Manage Categories" as manage_cat
        usecase "Create Category" as create_cat
        usecase "Read/View Categories" as read_cat
        usecase "Update Category" as update_cat
        usecase "Delete Category" as delete_cat
    }

    ' Customer Browsing - Rightmost position
    package "Customer Browsing" as customer_ops {
        usecase "Browse Menu" as browse_menu
        usecase "Search Menu Items" as search_items
        usecase "Filter by Category" as filter_cat
        usecase "Check Item Availability" as check_avail
        usecase "View Item Images" as view_images
        usecase "Sort Menu Items" as sort_items
    }
}

' CRUD Relationships - Menu Items (Include: mandatory, base -> included)
manage_items --> create_item : <<include>>
manage_items --> read_items : <<include>>
manage_items --> update_item : <<include>>
manage_items --> delete_item : <<include>>

' Extended Menu Item operations (Extend: optional, extender -> base)
read_items <.. upload_images : <<extend>>
read_items <.. set_prices : <<extend>>
read_items <.. set_discounts : <<extend>>
read_items <.. update_avail : <<extend>>

' CRUD Relationships - Categories (Include: mandatory, base -> included)
manage_cat --> create_cat : <<include>>
manage_cat --> read_cat : <<include>>
manage_cat --> update_cat : <<include>>
manage_cat --> delete_cat : <<include>>

' Extended Customer operations (Extend: optional, extender -> base)
browse_menu <.. search_items : <<extend>>
browse_menu <.. filter_cat : <<extend>>
browse_menu <.. check_avail : <<extend>>
browse_menu <.. view_images : <<extend>>
browse_menu <.. sort_items : <<extend>>

' Actor Relationships
customer --> browse_menu

admin --> manage_items
admin --> manage_cat

' Notes for clarity
note left of browse_menu : <b>Layout Structure (Inverted):</b>\n• Entities positioned right to left\n• Functions flow within each entity\n• Include/Extend relationships shown\n\n<b>Include vs Extend Pattern:</b>\n• <<include>>: Mandatory behavior (base → included)\n• <<extend>>: Optional behavior (extender → base)

note left of search_items : <b>CRUD Operations:</b>\n• Create: Add new menu items\n• Read: View existing items\n• Update: Modify item details\n• Delete: Remove items\n\nAll CRUD operations are <<include>> relationships

note left of manage_cat : <b>Entity Flow (Inverted):</b>\nCustomer Browsing → Category Entity → Menu Item Entity\n\nEach entity contains its complete functionality set

note left of manage_items : <b>Function Progression:</b>\nWithin each entity:\n• Base management use case\n• CRUD operations (included)\n• Extended functions (optional)\n\nShows complete functionality spectrum

note left of browse_menu : <b>User Types & Entity Access:</b>\n• Customer: Menu browsing and interaction\n• Admin: Full CRUD operations on menu items and categories\n\n<b>Layout Direction:</b> Entities right-to-left, functions within entities right-to-left

@enduml