@startuml Payment_Portal_Use_Cases
!theme plain
left to right direction
skinparam backgroundColor #FEFEFE
skinparam packageBackgroundColor #FFFFFF
skinparam packageBorderColor #000000
skinparam actorBackgroundColor #FFFFFF
skinparam actorBorderColor #000000
skinparam usecaseBackgroundColor #FFFFFF
skinparam usecaseBorderColor #000000
skinparam noteBackgroundColor #FFFFFF
skinparam noteBorderColor #000000
skinparam packageFontSize 12
skinparam usecaseFontSize 11
skinparam actorFontSize 11
title BMS Restaurant-System - Payment Portal Use Cases (CRUD Structure)

' Primary Actors (Right Side - inverted)
actor "Customer" as customer
actor "Admin" as admin
actor "Driver" as driver
actor "Finance Staff" as finance

' System boundary with entities flowing left to right (inverted layout)
rectangle "Payment Processing System" as system {

    ' Payment Entity - Leftmost position (inverted)
    package "Payment Entity" as payment_entity {
        usecase "Manage Payments" as manage_payments
        usecase "Create Payment" as create_payment
        usecase "Read Payment Status" as read_payment
        usecase "Update Payment" as update_payment
        usecase "Cancel Payment" as cancel_payment
        usecase "Select Payment Method" as select_method
        usecase "Choose Cash on Delivery" as choose_cash
        usecase "Choose Bank Deposit Slip" as choose_deposit
        usecase "Choose Card Payment" as choose_card
        usecase "Save Payment Method" as save_method
        usecase "Edit Saved Payment Methods" as edit_method
    }

    ' Deposit Entity - Next to Payment
    package "Deposit Entity" as deposit_entity {
        usecase "Manage Deposits" as manage_deposits
        usecase "Create Deposit Submission" as create_deposit
        usecase "Read Deposit Status" as read_deposit
        usecase "Update Deposit Details" as update_deposit
        usecase "Cancel Deposit" as cancel_deposit
        usecase "Upload Deposit Slip Image" as upload_slip
        usecase "Enter Transaction Details" as enter_details
        usecase "Enter Bank Reference Number" as enter_ref
        usecase "Verify Deposit Amount" as verify_amount
        usecase "Submit Deposit for Verification" as submit_verify
        usecase "Track Deposit Verification Status" as track_verify
        usecase "Receive Deposit Confirmation" as receive_confirm
    }

    ' Card Payment Entity - Next to Deposit
    package "Card Payment Entity" as card_entity {
        usecase "Manage Card Payments" as manage_card
        usecase "Create Card Transaction" as create_card
        usecase "Read Card Payment Status" as read_card
        usecase "Update Card Payment" as update_card
        usecase "Cancel Card Payment" as cancel_card
        usecase "Enter Card Information" as enter_card
        usecase "Validate Card Details" as validate_card
        usecase "Process Card Payment" as process_card
        usecase "Handle Card Payment Failure" as handle_failure
        usecase "Retry Failed Payment" as retry_payment
        usecase "Receive Payment Confirmation" as receive_card_confirm
    }

    ' Cash Payment Entity - Next to Card
    package "Cash Payment Entity" as cash_entity {
        usecase "Manage Cash Payments" as manage_cash
        usecase "Create Cash Transaction" as create_cash
        usecase "Read Cash Payment Status" as read_cash
        usecase "Update Cash Payment" as update_cash
        usecase "Complete Cash Payment" as complete_cash
        usecase "Select Cash on Delivery" as select_cash
        usecase "Prepare Change Calculation" as prepare_change
        usecase "Record Cash Collection" as record_collection
        usecase "Generate Cash Receipt" as gen_cash_receipt
        usecase "Update Cash Payment Status" as update_cash_status
    }

    ' Payment Verification - Next to Cash
    package "Payment Verification" as verification_entity {
        usecase "Verify Payments" as verify_payments
        usecase "Review Pending Deposits" as review_pending
        usecase "Verify Deposit Slip Images" as verify_images
        usecase "Validate Transaction Details" as validate_details
        usecase "Approve Deposit Payment" as approve_deposit
        usecase "Reject Invalid Deposit" as reject_deposit
        usecase "Request Additional Information" as request_info
        usecase "Process Payment Corrections" as process_corrections
    }

    ' Payment History Entity - Next to Verification
    package "Payment History Entity" as history_entity {
        usecase "Manage Payment History" as manage_history
        usecase "View Payment History" as view_history
        usecase "Search Payment Records" as search_records
        usecase "Filter by Payment Method" as filter_method
        usecase "Filter by Date Range" as filter_date
        usecase "Filter by Payment Status" as filter_status
        usecase "Download Payment Receipt" as download_receipt
        usecase "View Payment Analytics" as view_analytics
    }

    ' Payment Security - Rightmost position (inverted)
    package "Payment Security" as security_entity {
        usecase "Manage Payment Security" as manage_security
        usecase "Handle Payment Disputes" as handle_disputes
        usecase "Process Chargebacks" as process_chargebacks
        usecase "Validate Payment Security" as validate_security
        usecase "Comply with PCI Standards" as pci_compliance
    }
}

' CRUD Relationships - Payments (Include: mandatory, base -> included)
manage_payments --> create_payment : <<include>>
manage_payments --> read_payment : <<include>>
manage_payments --> update_payment : <<include>>
manage_payments --> cancel_payment : <<include>>

' Extended Payment operations (Extend: optional, extender -> base)
read_payment <.. select_method : <<extend>>
read_payment <.. choose_cash : <<extend>>
read_payment <.. choose_deposit : <<extend>>
read_payment <.. choose_card : <<extend>>
read_payment <.. save_method : <<extend>>
read_payment <.. edit_method : <<extend>>

' CRUD Relationships - Deposits (Include: mandatory, base -> included)
manage_deposits --> create_deposit : <<include>>
manage_deposits --> read_deposit : <<include>>
manage_deposits --> update_deposit : <<include>>
manage_deposits --> cancel_deposit : <<include>>

' Extended Deposit operations (Extend: optional, extender -> base)
read_deposit <.. upload_slip : <<extend>>
read_deposit <.. enter_details : <<extend>>
read_deposit <.. enter_ref : <<extend>>
read_deposit <.. verify_amount : <<extend>>
read_deposit <.. submit_verify : <<extend>>
read_deposit <.. track_verify : <<extend>>
read_deposit <.. receive_confirm : <<extend>>

' CRUD Relationships - Card Payments (Include: mandatory, base -> included)
manage_card --> create_card : <<include>>
manage_card --> read_card : <<include>>
manage_card --> update_card : <<include>>
manage_card --> cancel_card : <<include>>

' Extended Card operations (Extend: optional, extender -> base)
read_card <.. enter_card : <<extend>>
read_card <.. validate_card : <<extend>>
read_card <.. process_card : <<extend>>
read_card <.. handle_failure : <<extend>>
read_card <.. retry_payment : <<extend>>
read_card <.. receive_card_confirm : <<extend>>

' CRUD Relationships - Cash Payments (Include: mandatory, base -> included)
manage_cash --> create_cash : <<include>>
manage_cash --> read_cash : <<include>>
manage_cash --> update_cash : <<include>>
manage_cash --> complete_cash : <<include>>

' Extended Cash operations (Extend: optional, extender -> base)
read_cash <.. select_cash : <<extend>>
read_cash <.. prepare_change : <<extend>>
read_cash <.. record_collection : <<extend>>
read_cash <.. gen_cash_receipt : <<extend>>
read_cash <.. update_cash_status : <<extend>>

' Extended Verification operations (Extend: optional, extender -> base)
verify_payments <.. review_pending : <<extend>>
verify_payments <.. verify_images : <<extend>>
verify_payments <.. validate_details : <<extend>>
verify_payments <.. approve_deposit : <<extend>>
verify_payments <.. reject_deposit : <<extend>>
verify_payments <.. request_info : <<extend>>
verify_payments <.. process_corrections : <<extend>>

' Extended History operations (Extend: optional, extender -> base)
manage_history <.. view_history : <<extend>>
manage_history <.. search_records : <<extend>>
manage_history <.. filter_method : <<extend>>
manage_history <.. filter_date : <<extend>>
manage_history <.. filter_status : <<extend>>
manage_history <.. download_receipt : <<extend>>
manage_history <.. view_analytics : <<extend>>

' Extended Security operations (Extend: optional, extender -> base)
manage_security <.. handle_disputes : <<extend>>
manage_security <.. process_chargebacks : <<extend>>
manage_security <.. validate_security : <<extend>>
manage_security <.. pci_compliance : <<extend>>

' Actor Relationships
customer --> manage_payments
customer --> manage_deposits
customer --> manage_card
customer --> manage_history

admin --> verify_payments

driver --> manage_cash

finance --> manage_security


@enduml